---
title: "homework-03"
format: html
---


**readme stuff in video on canvas?** 
**include setup?**
**do you want html link listed here too?**

Link to GitHub Repository:
https://github.com/eliana427/ENVS-193DS_homework-03.git

```{r message=FALSE, echo=FALSE}
library(tidyverse)
library(here)
library(flextable)
library(janitor)
library(readxl)
library(readr)
library(dplyr)
```

<div style="font-size:30px; font-weight:bold;">Problem 1. Personal data</div>

a.  Data summarizing

I am comparing counts between groups, the "yes" on the phone group and
the "no" on the phone group because I am comparing the number of minutes
it takes me to walk to the IV tunnel from my house depending on if I am
talking on the phone or not, which is informative because theoretically
I think I walk slower when I am on the phone because I am less focused
on walking. I will take the median of each group, which will allow the data to not be impacted by outliers, and also the minimum, maximum, first quartile, and third tile of each group's walk times (minutes) and compare them.

b.  Visualization

```{r message=FALSE, echo=FALSE}
library(janitor)
my_data <- read_csv("my_data.csv")   # read from sample data.csv data frame, store as object

```

```{r}
clean_data <- my_data %>%  # store data as object to be cleaned, will be using clean data set
  clean_names() # clean the names in the data, spaces to underscores and all lowercase
View(clean_data) # view the new version of my data
```

```{r}
ggplot(data = clean_data, # use data frame clean_data
       aes(x = on_the_phone, # x-axis will be data from on_the_phone column
           y = time_it_takes_me_to_walk_to_tunnel_min, # y-axis will be data from time_it_takes_me_to_walk_to_tunnel_min column
           color = on_the_phone)) + # color based on yes or no in on_the_phone column
  geom_boxplot() + # create a boxplot
  geom_jitter(position = position_jitter(width = 0.2, # jitter the points with a horizontal distance of 0.2
                                         height = 0)) + # no vertical jitter
  labs(x = "On the phone (yes/no)", # name x-axis
       y = "Time to walk to IV tunnel (minutes)", # name y-axis
       color = "On the phone") + # name leegend
  scale_color_manual(values = c("firebrick4", "forestgreen")) # change colors of jittered  points/box plots
```

```{r message=FALSE, echo=FALSE}
clean_data <- clean_data |> # fixing original data
  mutate(time_it_takes_me_to_walk_to_tunnel_min
         = as.numeric(time_it_takes_me_to_walk_to_tunnel_min)) # make r read data from this column as numerical values

mean_yes <- clean_data |> # create new object for when I am on the phone from clean_data frame
  filter(on_the_phone == "Yes") |> # filter by when I am on the phone
  summarize(mean_yes = mean(time_it_takes_me_to_walk_to_tunnel_min, na.rm = TRUE)) # take the mean of the time it takes me to walk to tunnel in minutes when I am on the phone

mean_no <- clean_data |> # create new object for when I am not on the phone from clean_data frame
  filter(on_the_phone == "No") |> # filter by when I am not on the phone
  summarize(mean_no = mean(time_it_takes_me_to_walk_to_tunnel_min, na.rm = TRUE)) # take the mean of the time it takes me to walk to tunnel in minutes when I am not on the phone

data_summary <- clean_data |> # use clean_data frame to create the object to summarize data
group_by(on_the_phone) |> # group by yes or no on the phone
  summarize(mean = mean(time_it_takes_me_to_walk_to_tunnel_min), # take the mean of both yes and no
            n = length(time_it_takes_me_to_walk_to_tunnel_min), # count the number of values in each category to total the observations
            df = n - 1, # degrees of freedom is the number of observations minus 1
            sd = sd(time_it_takes_me_to_walk_to_tunnel_min), # find standard deviation of both categories
            se = sd/sqrt(n), # find standard error of both categories using this formula
            tval = qt(p = 0.05, df = df), # find the t-value for both categories
            margin = tval*se, # find the margin of error for both categories
            ci_lower = mean - tval*se, # find the lower bound confidence interval for both categories
            ci_higher = mean + tval*se) # find the upper bound confidence interval for both categories

data_summary # view the data summary in the console which displays all these values

```


```{r}
data_summary <- clean_data |> # use clean_data frame to create the object to summarize data
group_by(on_the_phone) |> # group by yes or no on the phone
  summarize(
    minimum = min(time_it_takes_me_to_walk_to_tunnel_min, na.rm = TRUE), # find the minimum
    q1 = quantile(time_it_takes_me_to_walk_to_tunnel_min, 0.25, na.rm = TRUE), # find the first quantile (25%)
    median = median(time_it_takes_me_to_walk_to_tunnel_min, na.rm = TRUE), # find the median
    q3 = quantile(time_it_takes_me_to_walk_to_tunnel_min, 0.75, na.rm = TRUE), # find teh third quantile (75%)
    maximum = max(time_it_takes_me_to_walk_to_tunnel_min, na.rm = TRUE) # find the maximum
  )

data_summary # display the data summary
```

c.  Caption

**Figure 1. Talking on the phone tends to make me take longer to walk to
the IV tunnel from my house.** Data from 'my_data' package (Shandalov
EB, 2025). Points represent observations of the time (minutes) it took
me to walk to the IV tunnel and plotted based on whether I was on the
phone or not (total n = 30). Colors represent if I was on the phone and
if I was not on the phone (red: no, green: yes).

d.  Table presentation

```{r warning=FALSE}
data_summary_rounded <- data_summary |> # creating new object for rounded data
  mutate(across(c(minimum, q1, median, q3, maximum), round, digits = 1)) # rounding numbers in table to one decimal place

ft <- flextable(head(data_summary_rounded), # create flextable from the rounded data
                col_keys = c("on_the_phone", "minimum", "q1", "median", "3", "maximum")) |> # make the column categories this variables 
  set_header_labels(mean = "Median", on_the_phone = "On the phone", q1 = "First quartile", q3 = "Third quartile", minimum = "Minimum", maximum = "Maximum") |> # change the names of the columns in the flextable
  autofit() # fit the flextable to the page

 ft <- set_caption(ft, caption = "Table 1: Walking Data Summary") # add a table to the flextable

ft # display the flextable
```

<div style="font-size:30px; font-weight:bold;">Problem 2. Affective visualization</div>

a.  Describe in words what an affective visualization could look like
    for your personal data

I would choose a physical representation, such as a shoe, where I would
mark my data points in different colors depending if I was on the phone
or not. To match my box plot, I would choose red for when I'm not on the
phone and green for when I am on the phone. An example of this could be
a vans shoe, which has individual dots and diamonds on the bottom; I
could place values that repeat next to each other, and I could include
points proportionally to spread across the shoe because I have a range
of 15-23 minutes. Including the confidence intervals would be helpful
too because it provides more information and guides me in where I place
the red and green colors.

b.  Sketch

I spoke to An at office hours and she told me I didn't have to do a sketch because I already had my draft on the iPad; for the final affective visualization, I will be drawing on a physical shoe.

c.

![Walk photo](shoevisualization.jpg){width="30%"}